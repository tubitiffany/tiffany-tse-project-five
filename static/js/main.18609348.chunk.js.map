{"version":3,"sources":["Form.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Form","getFormSelection","event","setState","userEnteredIngredient","target","value","state","action","onChange","this","type","name","id","onClick","e","props","getChoice","Component","Header","App","getAxios","axios","url","method","responseType","params","apiKey","ingredientName","then","response","substitutionsAvailable","data","status","substitutionMessage","message","substitutionOptions","substitutes","foodItem","preventDefault","className","map","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"qSA4CeA,G,uDA7BX,aAAe,IAAD,8BACV,gBAMJC,iBAAmB,SAACC,GAChB,EAAKC,SAAS,CACVC,sBAAuBF,EAAMG,OAAOC,SAPxC,EAAKC,MAAQ,CACTH,sBAAuB,IAHjB,E,qDAaJ,IAAD,OACL,OACI,0BAAMI,OAAO,IACT,2BAAOC,SAAUC,KAAKT,iBAAkBK,MAAOI,KAAKH,MAAMH,sBAAuBO,KAAK,OAAOC,KAAK,gBAAgBC,GAAG,kBAIrH,4BAAQF,KAAK,SAASG,QAAS,SAACC,GAAD,OAAO,EAAKC,MAAMC,UAAUF,EAAG,EAAKR,MAAMH,yBAAzE,wB,GArBGc,cCAJC,E,uKATP,OACI,gCACI,8DACA,qI,GALKD,aC4ENE,E,kDAtEb,aAAe,IAAD,8BACZ,gBAUFC,SAAW,WACTC,IAAM,CACJC,IAAI,2DACJC,OAAO,MACPC,aAAa,OACbC,OAAQ,CACNC,OAAO,mCACPC,eAAgB,EAAKrB,MAAMqB,kBAE5BC,MAAK,SAACC,GACP,EAAK3B,SAAS,CACZ4B,uBAAwBD,EAASE,KAAKC,OACtCC,oBAAqBJ,EAASE,KAAKG,QACnCC,oBAAqBN,EAASE,KAAKK,kBAxB3B,EA+BdpB,UAAY,SAACf,EAAOoC,GAClBpC,EAAMqC,iBAEN,EAAKpC,SAAS,CACZyB,eAAgBU,IAEf,WACD,EAAKjB,eApCP,EAAKd,MAAQ,CACXqB,eAAgB,IAChBG,uBAAwB,IACxBG,oBAAqB,IACrBE,oBAAqB,IANX,E,qDA8CZ,OACE,yBAAKI,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMvB,UAAWP,KAAKO,YAEkB,YAAtCP,KAAKH,MAAMwB,uBACP,2EAAiDrB,KAAKH,MAAMqB,gBAC5D,6BACA,4BAAKlB,KAAKH,MAAMqB,gBAChB,2BAAIlB,KAAKH,MAAM2B,qBACf,4BACGxB,KAAKH,MAAM6B,oBAAoBK,KAAI,SAACC,GACnC,OACE,4BAAKA,a,GA5DPxB,aCIEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxB,a","file":"static/js/main.18609348.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css'\n\n// Component to get user text from a form\n// LOGICAL FLOW\n    // User is going to enter text in a text field\n    // Save that tet to a state\n    // User submits the form. The button press passes the user selection back up to App.js by calling a function passed down through props\n\n// What will we need\n    // - A form with a text field and a submit button\n    // - State\n    // - Function from props\n\nclass Form extends Component {\n    constructor() {\n        super();\n        this.state = {\n            userEnteredIngredient: \"\"\n        }\n    }\n\n    getFormSelection = (event) => {\n        this.setState({\n            userEnteredIngredient: event.target.value\n        });\n    }\n\n    render() {\n        return(\n            <form action=\"\">\n                <input onChange={this.getFormSelection} value={this.state.userEnteredIngredient} type=\"text\" name=\"translateText\" id=\"translateText\">\n                </input>\n\n\n                <button type=\"submit\" onClick={(e) => this.props.getChoice(e, this.state.userEnteredIngredient)}>\n                    Find Substitute\n                </button>\n            </form>\n\n        )\n    }\n}\n\nexport default Form;","import './App.css'\nimport React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header>\n                <h1>Ingredient Substitution Finder</h1>\n                <p>Enter the ingredient you're missing to see if there's anything you can use to substitute it with!</p>\n            </header>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Form from './Form'\nimport Header from './Header';\nimport './App.css';\n\n// note for testing! use ingredients like butter, molasses, soy sauce, salmon for results\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ingredientName: \" \",\n      substitutionsAvailable: \" \",\n      substitutionMessage: \" \",\n      substitutionOptions: []\n    }\n  }\n\n  // API call to funtranslations.com API to get data, save it in a state\n  getAxios = () => {\n    axios({\n      url: `https://api.spoonacular.com/food/ingredients/substitutes`,\n      method: `GET`,\n      responseType: `json`,\n      params: {\n        apiKey: `fe865e8ce28b4733ae2e9fd57d01b355`,\n        ingredientName: this.state.ingredientName,\n      }\n    }).then((response) => {\n      this.setState({\n        substitutionsAvailable: response.data.status,\n        substitutionMessage: response.data.message,\n        substitutionOptions: response.data.substitutes,\n      })\n    })\n  }\n\n  // Function to get user's choice from Form.js component\n  // save user's choice to a state\n  getChoice = (event, foodItem) => {\n    event.preventDefault();\n\n    this.setState({\n      ingredientName: foodItem\n\n    }, () => {\n      this.getAxios()\n    })\n\n  }\n\n\n// display header, form and conditional statement to render information to the DOM\n  render() {\n    return (\n      <div className=\"App\">\n        <Header></Header>\n        <Form getChoice={this.getChoice}></Form>\n        {\n          this.state.substitutionsAvailable === \"failure\" \n            ? <p>Sorry there are no substitutes available for {this.state.ingredientName}</p>\n            : <div>\n              <h2>{this.state.ingredientName}</h2>\n              <p>{this.state.substitutionMessage}</p>\n              <ul>\n                {this.state.substitutionOptions.map((item) => {\n                  return (\n                    <li>{item}</li>\n                  )\n                })}\n              </ul>\n            </div>\n          }\n      </div>\n    );  \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}